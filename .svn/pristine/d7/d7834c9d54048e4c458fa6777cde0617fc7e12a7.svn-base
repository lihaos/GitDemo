package cn.ch.netem.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.ch.netem.pojo.Comment;
import cn.ch.netem.pojo.Note;
import cn.ch.netem.pojo.NoteExample;
import cn.ch.netem.service.CommentService;
import cn.ch.netem.service.NoteService;



@Controller
public class NoteController {
	
	@Autowired
	private NoteService noteService;
   
	private int pageSize=11;
	
	@Autowired
	private CommentService commentService;
	
    @RequestMapping("/posta")
    public String test(Model model) {   //查看精华帖子和最新的帖子
    	NoteExample example = new NoteExample();
    	List<Note> list=  noteService.selectNote(example);
    	List<Note> list1= noteService.selectNewest();
    	model.addAttribute("list1", list1);
        model.addAttribute("list", list);
        return "/pre/index";
    }
    
    
    @RequestMapping("/queryAll")
    public String queryAll(@RequestParam(value="yeMa",defaultValue="1",required=false)int yeMa,@RequestParam(required=false)String title, Model model) {   //查看所有帖子
    	
    	int count = noteService.count(title);
    	
    	int total = count%pageSize==0?count/pageSize:count/pageSize+1;
    	
    	List<Note> list=  noteService.queryAll(yeMa,pageSize,title);
        model.addAttribute("total", total);
        model.addAttribute("list", list);
        model.addAttribute("ye", yeMa);
        return "/pre/note";
    }
    
    @RequestMapping("/query")  
    public String query(int noteId,Model model,@RequestParam(value="yeMa",defaultValue="1",required=false)int yeMa) { //查看帖子内容和评论
    	 
    	 SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm");
    	 if(yeMa==1) {
    		 Note note = noteService.select(noteId);
             String sDate=sdf.format(note.getCreatedate());
             model.addAttribute("date", sDate);
    		 model.addAttribute("note", note);
    	 }
    	 
    	 int  count = commentService.count(noteId);
    	 
    	 int total = count%pageSize==0?count/pageSize:count/pageSize+1;
    	 
    	 List<Comment> list = commentService.select(noteId,yeMa,pageSize);
    	for (Comment comment : list) {
    		comment.setCreatedate(new java.sql.Date(comment.getCreatedate().getTime()));
    		
    		
		}
    	 
        model.addAttribute("size", list.size());
    	model.addAttribute("list", list);
    	model.addAttribute("ye", yeMa);
    	model.addAttribute("nid", noteId);
    	model.addAttribute("total", total);
        return "/pre/noteXs";
    }
    
    
    
    @RequestMapping("/NoteInsert")
    @ResponseBody
    public String NoteInsert() {  //发表帖子
    	Note note = new Note();
    	note.setUserId(1);
    	note.setCreatedate(new Date());
    	note.setNoteTitle("主题");
    	note.setNoteContent("内容");
    	note.setIsessence(1);
    	
    	return ""+noteService.Noteinsert(note);
    }
    
    
    @RequestMapping("/selectMypost")
    public String selectMypost(@RequestParam(defaultValue="2") int id,Model model) {  //查看我的帖子
        List<Note> list = noteService.selectMypost(id);
    	model.addAttribute("list", list);
        
    	return "/pre/dongtaiPost";
    }
    @RequestMapping("/noteUpdate")
    public String noteUpdate() {  //修改我的帖子
        //对象
        
    	
    	return "";	
    }
    @RequestMapping("/noteDelete")
    @ResponseBody
    public void noteDelete(int id,HttpServletResponse response) {  //删除我的帖子		
        
    	int pd=noteService.noteDelete(id);
    	if(pd==1) {		
    		
    		commentService.deletePostComment(id);
    		
    	}
    	try {         
			response.getWriter().println(pd);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
     
    }
}

